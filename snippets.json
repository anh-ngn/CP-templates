{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "console.log('$1');",
	// "$2"
	"Template": {
		"prefix": "AN",
		"body": [
			"#include <bits/stdc++.h>",
			"#define fi first",
			"#define se second",
			"#define ll long long",
			"#define ld long double",
			"#define ii pair<int, int>",
			"#define FOR(i,a,b) for (int i=a; i<=b; ++i)",
			"#define FORD(i,b,a) for (int i=b; i>=a; --i)",
			"using namespace std;",
			"",
			"const int MAX = 2e5+6;",
			"const int MOD = 1e9+7;",
			"",
			"int main(int argc, char const *argv[])",
			"{",
			"\tcin.tie(0)->sync_with_stdio(0);",
			"\tif (fopen(\"input.txt\", \"r\")){",
			"\t\tfreopen(\"input.txt\",\"r\",stdin);",
			"\t}",
			"\t",
			"\t$0",
			"\treturn 0;",
			"}"
		],
		"description": "Default template"
	},
	"64-bit integer": {
		"prefix": "i64",
		"body": [
			"int64_t",
		],
		"description": "int64_t"
	},
	"Endline": {
		"prefix": "ENDL",
		"body": [
			"\"\\n\"",
		],
		"description": "endl"
	},
	"all element": {
		"prefix": "all",
		"body": [
			"${1:a}.begin(), ${1:a}.end()",
		],
		"description": "All elements"
	},
	"Clear stdin": {
		"prefix": "clear stdin",
		"body": [
			"std::cin.ignore(INT_MAX);"
		],
		"description": "ignore stdin"
	},
	"rng": {
		"prefix": "rng",
		"body": [
			"mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());//64-bit number generator"
		],
		"description": "random number genarator"
	},
	"test_cases": {
		"prefix": "debug_template",
		"body": [
			"//Debugging template",
			"#ifndef ONLINE_JUDGE",
			"template <class T1, class T2>",
			"ostream &operator<<(ostream &os, const pair<T1, T2> &p) {",
			  "return os << '{' << p.first << \", \" << p.second << '}';",
			"}",
			"",
			"template <class T, class = decay_t<decltype(*begin(declval<T>()))>,",
					  "class = enable_if_t<!is_same<T, string>::value>>",
			"ostream &operator<<(ostream &os, const T &c) {",
			  "os << '[';",
			  "for (auto it = c.begin(); it != c.end(); ++it)",
				"os << &\", \"[2 * (it == c.begin())] << *it;",
			  "return os << ']';",
			"}",
			"//support up to 5 args",
			"#define _NTH_ARG(_1, _2, _3, _4, _5, _6, N, ...) N",
			"#define _FE_0(_CALL, ...)",
			"#define _FE_1(_CALL, x) _CALL(x)",
			"#define _FE_2(_CALL, x, ...) _CALL(x) _FE_1(_CALL, __VA_ARGS__)",
			"#define _FE_3(_CALL, x, ...) _CALL(x) _FE_2(_CALL, __VA_ARGS__)",
			"#define _FE_4(_CALL, x, ...) _CALL(x) _FE_3(_CALL, __VA_ARGS__)",
			"#define _FE_5(_CALL, x, ...) _CALL(x) _FE_4(_CALL, __VA_ARGS__)",
			"#define FOR_EACH_MACRO(MACRO, ...)                                             \\",
			  "_NTH_ARG(dummy, ##__VA_ARGS__, _FE_5, _FE_4, _FE_3, _FE_2, _FE_1, _FE_0)     \\",
			  "(MACRO, ##__VA_ARGS__)",
			"//Change output format here",
			"#define watch(x) cerr << \"\\033[1;32m\" #x \" = \\033[1;34m\" << (x) << \"\\033[0m; \";",
			"#define dbg(...)                                                              \\",
				"\tcerr << \"\\033[2;31mLine \" << __LINE__ << \": \\033[0;m\"; \\",
				"\tFOR_EACH_MACRO(watch, __VA_ARGS__)                     \\",
				"\tcerr << endl",
			"#else",
			"#define dbg(...)",
			"#endif"
		],
		"description": "Template for debugging"
	},
}
